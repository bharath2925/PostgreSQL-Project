---SQS---
*SQS is a pull-based, not pushed-based
*Messages are 256 KB in size.
*Messages can be kept in queue from 1 min to 14 days. the default retention period is 4 days.
*Visibility Timeout: It is the amount of time that the message is invisible in the SQS queue after a reader picks up that message.
 Provided the job is processes before the visibility timeout expires, the message will then be deleted from the queue.
 If the job is not processed within that time, the message will become visible again and another reader will process it. This 
 could result in the same message being delivered twice.
*Common exam question could be like a app keeps sending messages twice, the reason could be visibility timeout is not long enough.
  need to increase the visibility timeout. 
*visibility timeout maximum is 12 hrs.
*SQS guarantees that your message will be processed at least once.
*Amazon SQS Long polling is a way to retrieve messages from your Amazon SQS queues. While the regular short polling returns 
 immediately (even if the message queue being polled is empty), long polling returns immediately(even if the message queue being polled is empty)
*Long polling doesn't return a response until a message arrives in the message queue, or the long poll times out.
*In exam, If you see DECOUPLE word, Look for SQS in the options.

-Amazon SQS is a web service that gives you access to a message queue that can be used to store messages while waiting for a computer
 to process them.
-Its a distributed queue system that enables web service apps to quickly and reliably queue messages that one component in the app
 generates to be consumed by another component.
-A queue is a temporary repository for messages that are awaiting processing.
-One of the first services of AWS. 

-Using Amazon SQS, you can DECOUPLE the components of an app so they run independently, easing message management bw components.
-Any component of a distributed app can store messages in a fail-safe queue.
-Messages can contain upto 256 KB of text in any format. Any component can later retrieve the messages programmatically using
 Amazon SQS API. 
-We can cross the 256 KB limit as well, but the data will then get stored into S3. 


-The queue acts as a buffer between the component producing and saving data, and the component receiving the data for processing.
-This means the queue resolves issues that arise if the producer is producing work faster than the consumer can process it, or
 if the producer or consumer are only intermittently connected to the network.
 
There are 2 types:
  1. Standard Queues: Amazon SQS offers standard as the default queue type. A standard queue lets you have a nearly-unlimited number
    of transactions per sec. Standard queue guarantee that a message is delivered atleast once.
   -Occasionally(because of the highly-distributed architecture that allows high throughput), more than one copy of a message might
    be delivered out of order.
   -However, standard queues provide best-effort ordering which ensures that messages are generally delivered in the same order as
    they are sent.
   -To use Standard queues, your app needs to handle 2 things, The messages being delivered out of order, two, multiple copies of
    same message being delivered twice.
  
  2.FIFO Queues: They complements the standard queue. They are fifo delivery and exactly-once processing.
    -The order in which messages are sent and received is strictly preserved and a message is delivered once and remains available
     until a consumer processes and deletes it. duplicates are not introduced into the queue.
    -FIFO queues also support message groups that allow multiple ordered message groups within a single queue.
    -FIFO queues are limited to 300 tps but have all the capabilities of standard queues.
    
    
    

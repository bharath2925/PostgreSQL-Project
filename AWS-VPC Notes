--------VPC---------
What is a VPC?
- Amazon Virtual Private Cloud lets you provision a logically isolated section of AWS cloud where you can launch AWS resources in a virtual 
  network you define.
- You have complete control over your virtual networking environment, including selecting your own IP range, creating of subnets ,configuration
  of route tables and network gateways.
- You can easily customize your network config of your vpc. For ex: You can create public facing subnet for your webservers that has access 
  to the internet and place your backend systens such as databases and app servers in a private facing subnet with no internet access.
-You can leverage multiple layers of security , including security groups and network access control lists, to help control access to ec2 in each subnet.
-YOu can also create a Hardware VPC connection between your corporate datacenter and your VPC and leverage the aws cloud as an extension 
  of your corporate datacenter
  
  
What can we do with VPC?
- Launch instances into your subnet of your choosing.
- Assing custom IP address ranges in each subnet.
- Configure route tables between subnets.
- Create internet gateways and attach it to your VPC.
- Much better security control of your AWS resources.
- Assign SG to each instances.
- Have Subnet network access control lists

Difference between default VPC and custom VPC.
- DVPC is user friendly, no networking knowledge needed, allowing to immediately deploy instances.
- All subnets in default VPC have a route out to the internet.
- By default, Each EC2 has a public and a private address.

VPC Peering: 
- Allows you to connect one VPC to another via a direct network route using private IP addresses.
- Instances behave as if they were on the same private network.
- You can peer VPC with other AWS accounts as well as other VPC's in the same account.
- You can peer between regions
- Peering is a star configuration, ie 1 VPC peers with 4 others. No Transitive Peering.

***Think of VPC as a logical Datacenter in AWS.
It consists of Internet Gateways(IGW's)/Virtual Private Gateways, Route tables, Network Access control lists, subnets and security groups.
1subnet can be speard in 1 az only. multiple subnets can be in 1 az. but 1 subnet cant be in multiple az.
Network ACL's are Stateless, which means you can allow rules and deny rules for ex if we add a inbound rule for a port we will have to add 
  an outbound rule for that port. in Security groups this is done by default making them stateful.
In VPC there is no Transitive Peering. Think of it like this:
      
          VPC-D
            ^
            |
VPC-A <-> VPC-B <-> VPC-E
            |
            ^
          VPC-C
Here VPC B is peered with A,C,D,E. But if A wants to communicate with D, It cannot communicate via B. This is called Transitive Peering.
This is NOT ALLOWED in VPC's. To communicate, We need to connect A and D in a separate connection.

----VPC Lab Notes----
Steps while creating a VPC:
1. Create VPC:
  Tag is the name of the VPC.
  IPv4 CIDR Block: is the ipv4 address range to select.This uses CIDR block representation.
  CIDR: it looks like this: 10.43.0.0/24
  In an ip address a.b.c.d a,b,c,d are having each memory of 8 bits. so when we say /24. it means that first 3 parts (24/8) of ip, here
  a,b,c are fixed. and only the last .0 is variable here. making it 2pow(8) = 256 unique ip addresses range.
  Tenancy: default means all the vpc will be on shared hardware. but dedicated is a separate hardware for your entire VPC(Costly)
-when we create the vpc, it does not automatically create a subnet but it creates a route table,Network ACL and Security Group
-So basically the default created VPC would be like this:
            SG<-NetworkACL<-RouteTable<-Router

-In order to create a VPC, we first need to create a subnet
2. Create Subnets:
  Tag is the name give to the vpc. Its good practice to mention the AZ in the tag name of the vpc.
  **There can be only 1 subnet per 1 az
  we can mention the ipv4 range we want for this subnet. it should branch from the range provided while creating the vpc.
  -by default, subnets are No for auto assign publicly accessible IP address. We need to go to actions and enable that.
    this would give access to internet.
 -The next step would be to give internet access to our vpc. this is done by creating internet gateways
3. Create Internet Gateways.
  We give name to the IGW and once we create it, its detached. we need to attach it to a VPC. 
  -Remmember we can have only ONE internet gateway per VPC.
-Once we create the IGW. We need to configure our route tables

4. Configure Route Tables:
  -We can see our default route table created while creating the VPC, things to note:
    -The route has the generic ip range provided while creating VPC, this means our subnets can communicate to each other.
    -This is a security concern as every subnet we create by default is public, to avoid this we usually have main route table 
     for private subnet and a separate route table for public subnets.
   -Create Route Table: We give a name and associate the vpc for that route table. 
    Once the Route table is created. We go to route and edit routes. we add 0.0.0.0/0 and select internet gateway for target.
    we can see the igw we created in the drop down.
   -Once the route table is created with igw. we need to associate the public subnet to this route table.
This completes the VPC set up.Next, we need to setup ec2 instances in our public and private subnets.

The next step is to create EC2 instances. While configuring EC2, we need to select the vpc we created with the public subnet(while creating public ec2)
Note that SG does not span over vpc. when we create a new vpc we would need to create a new sg or use the default one.
We shal create 2 ec2 instances one for public and one for private. 
while creating the ec2 for private. it is necessary to have a custom SG for this ec2. so its better to create a new sg for private subnet ec2's


----NAT instances and gateways---
NAT instances are Network Address Transalation Ec2 instances which is used to communicate with our private subnet. 
NAT instances are individual instances that does this job. Gateways are an spread out open gateway spread across multiple az. 

-NAT acts as a gateway to our private subnet through our public subnet connecting to the internet gateway.
-As in general ec2 needs to either be a source or a destination of a data flow. As NAT acts as gateways, We need to DISABLE 
  source/destination checks for a NAT instance.
-We need to create a new route connection so that our NAT instance can talk to the database server(private subnet)
-We can go to VPC-Route Tables-Select the main route for your vpc(Private subnet) and add a route.
  select 0.0.0.0/0 and select the NAT instace as type. click ok.
-We can then ssh into our private instance via our public. and when we run yum updates, we can see the updates happening.
  the internet is enabled to the private subnet using the NAT instance.
  
-In real time, there are 1000's or instances where you would need to run updates, to avoid this instance, we use NAT gateways.

-Create NAT Gateways: First step would be to identify the public subnet and we need to create an Elastic IP address(EIP)
-Once that is done, we need to go to the route and add a route to this NAT gateway. then we can install updates to our
  private subnet via Puplic Subnet->NAT gateway

**Remmember for NAT Instances**
  -While creating NAT instance, Disable source/destination check on the instance.
  -NAT instance must be on a public subnet.
  -There must be a route out of the private subnet to the NAT instance.
  -The amount of traffic a NAT instance can support depends on the instance size. If you are bottlenecking, Increase the size.
  -They are always behind a SG
**Remmember for NAT Gateways**
  - They are redundant to AZ. They do not span across AZ
  -Prefered by enterprise
  -starts by 5GBPS and scales upto 45 GBPS
  -No need to patch
  -Not associated with SG
  -Automatically assigned to public IP
  -Remmember to update your route tables.
  -If you have resources in multiple AZ and they share the NAT gateway, in the event of NAT gateway's AZ down, resources in other AZ will
    also loose internet access, 
  -To create an AZ independent architecture, Create NAT gateways in each AZ and configure your routing to ensure that the resources 
    use the NAT gateway in the same AZ.
    
    
    
 -----Network Access Control Lists vs SG-----

- NACL gets created when we create a VPC. The same NACL is used for all subnets by default.
- By clicking a NACL, we can see the inbound rules. Each rule has a rule #. 
- Amazon recommends to increase by 100 for each new series of rules. for ex 200,201    300,301 and so on
-Steps to create a new NACL:
  1. Name the NACL and select the VPC to associate.
 Once the NACL is created, we can see that the inbound and outbound rules are all denied. This is by default settings
 
To check this lets create a default webpage in our public ec2. below code to create a index.html:

service httpd status
yum install httpd -y
service httpd start
cd /var/www/html
nano index.html
<html><h1>HelloWorld!.From Cloud!!!</h1></html>
chkconfig httpd on

Once this is done. when we ping the public IP of the webserver, we can see our webpage.
-We are able to see the webpage because the public subnet is still associated with the default NACL. 
-to Change NACL, go to VPC-> NACL->select the create NACL->click on subnet associations-> select the public ec2(webserver)->click edit.
-This will add the newly created NACL to your public subnet.

-Once this is done, you can refresh your public ip adress webpage and realize that it times out. this is because our newly created NACL,
  does not have any inbound/outbound rules set.
-to fix this, you need to add rules to your new NACL.
-to create rule, select inbound rule and add 0.0.0.0/0 to http(80),https(443) and ssh(22) and click add. This will allow these request to your
  NACL.
-Outbound rules will not be created after inbound, this needs to be done manually. go to outbound rules and do the same.

-----VPC Flow Logs------
It is a feature that allows you to capture info about the IP traffic going to and from network interfaces in your VPC.
-Flow log data is stored using Amazon Cloudwatch logs.
-After you created a flow log, you can view and retrieve its data from Amazon Cloudwatch logs.

-Flow logs can be implemented at 3 levels:
  1. VPC
  2. Subnets
  3.Network Interface Level
-To create a new FLow logs, we first need to create a log group in cloudwatch and need to create a new IAM role for vpc logs.
****Remmember****
1.You cannot enable flow logs for VPCs that are peered with your VPC unless the peer VPC is in your account.
2. You can tag flow logs.
3.After you created a flow log, you cannot change its config. for ex you cant change IAM role after its created.
4. Not all IP traffic is monitored, for ex Traffic generated by instances when they contact Amazon DNS. If you use you own DNS server,
  then all traffic to that DNS is logged.
5.Traffic generated by windows instance for amazon windows license activation is not logged.
6. Traffic to and from 169.254.169.254 for instance metadata is not monitored.
7. DHCP traffic is not monitored
8. Traffic to the reserved IP address for the default VPC router is not logged.

-----Bastion Hosts-----
-It is a special purpose computer on a network designed and configured to withstand attacks.
-The computer generally hosts a single app, for ex a proxy server, and all other services are removed or limited to reduce the threat to the computer.
-It is hardened in this manner primarily due to its location and purpose, which is either on the outside of the firewall or in a DMZ(Public Subnet)
  and usually involves access from untrusted networks or computers.
  
***Remmember***
-A NAT Gateway/instance is used to provie internet traffic to EC2 instances in private subnets. It does not support sshing into our private subnets.
-A Bastion is used to securely administer EC2 instances(SSH/RDP). They are called Jump Boxes in AU
-You cannot use NAT Gateways as Bastion Host.


----Direct Connect----
-It is a cloud service solution that makes it easy to establish a dedicated network connection from your premises to AWS.
-Using AWS Direct Connect, you can establish private connectivity bw AWS and your datacenter, office or colocation environment,which in
  many cases can reduce your network costs, increase bandwidth throughput and provide a more consistent network experience than internet
  based connections.
  
****Remmember****
-Direct connect directly connects your datacenter to AWS.
-Useful for high throughput workloads.(loads of network traffic)
-If you need a stable, reliable secure connection.

----Setup Direct Connect----(Remmember these)
1.Create a virtual interface in the Direct connect console.This is a PUBLIC Virtual Interface.
2.Go to VPC console->VPN Connections. Create a Customer Gateway
3.Create a Virtual Private Gateway
4.Attach the VPG to the desired VPC.
5.Select VPN connections and create a new VPN connection.
6.Select VPG and the customer gateway(selected in step2)
7.Once VPN is available, set up the VPN on the customer gateway or firewall.

**Dont forget to watch the video**

----AWS Global Acclerator-----
-It is a service in which we create acclerators to improve availability and performance of your apps for local and global users
Overall it works like this:
User(Customer traffic)->Edge Location(enters global network at nearest edge location)->AWS Global Acclerator->Endpoint Group->Endpoints

GA components:
1.Static IP Address:By default,GA provides you with 2 static IP addresses that you associate with the acclerator.
  -You can bring your own IP Addresses.
  
2.Acclerator:Acclerator directs traffic to optimal endpoints over the AWS global network.This improves the availibility and performance of your
  internet applications that are used by global audience.
  -Each acclerator includes one or more listeners.
  
3.DNS Name:GA assigns each acclerator a default DNS name that points to the static IP address that GA assigns to you.
  -Depending on the usecase, you can use your acclerators static IP addresses or DNS names to route traffic to your acclerator or set up DNS
   records to route traffic using your own custom Domain Name.
   
4.Network Zone:It services the static IP addresses for your acclerator from a unique IP subnet.
  -Similar to AWS AZ, a network zone is an isolated unit with its own set of physical infrastructure.
  -When you configure an acclerator, by default, GA allocates 2 IPv4 addresses for it. If 1 IP becomes unavailable due to ip addresss blocking 
   by certain client networks, or network disruptions, client apps can retry on the healthy static IP address from the other isolated network zone.
    
5.Listner: It processes inbound connections from clients to GA based on port and protocl you configure.
  -GA supports TCP(Transmission Control Protocol/Internet Protocol,) and UDP(User Datagram Protocol)
  -Each listner has one or more endpoint groups associated with it and traffic is forwarded to endpoints in one of the groups.
  -You associate endpoint groups with listeners by specifying the regions that you want to distribute traffic to.
  -Traffic is distributed to optimal endpoints within the endpoint groups associated with a listner.
  
6.Endpoint group: It is associated to a AWS region.Endpoint groups include one or more endpoints in a region.
  -You can increase/decrease the percentage of traffic that would be otherwise directed to an endpoint group by adjusting a setting called TRAFFIC DIAL.
  -The traffic dial lets you easily do performance testing or blue/green deployment testing for new releases across different aws regions.
  
7.Endpoints: They can be Network Load Balancers, Application Load Balancers, EC2 or Elastic IP addresses.
  -An application load balancer can be internet facing or internal.
  -Traffic is routed to endpoints based on cofig options that you choose, such as endpoint weights.
  -For each endpoint, you can configure weights. Weights are numbers that you can choose to specify the proportion of traffic to route to each one.
  -This can be useful to do performance testing in a region. 


-----VPC Endpoints-----
-VPC Endpoint enables you to privately connect your VPC to supported AWS services and VPC endpoints services powered by PrivateLink without
 requiring Internet Gateway,NAT Device,VPN Connection or AWS direct connect.
-Instances in your VPC do not require public IP addresses to communicate with resources in the service.
-Traffic between your VPC and other services does not leave Amazon Network.
-Endpoints are virtual devices, They are horizontally scaled,redundant and highly available VPC components that allow communication between
 instances in your VPC and services without imposing availibility risks or bandwidth constraints on your network traffic.
 
There are 2 types of endpoints.
1.Interface Endpoint: It is an Elastic Network Interface with a private IP addresses that serves as an entry endpoint for the traffic destined to a
  supported device.
  -So basically you need to connect an ENI to the EC2 which is used to communicate with other services.
2.Gateway Endpoint:They are similar to Interface, they are currently configured to S3 and DynamoDB.





